@model SaleManagementSystem.Model.DAL.Sale

@{
    Layout = "~/Views/Shared/_LayoutForModal.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="modal fade" id="MyModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Detail Sales</h4>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="row">
                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.SaleCode, htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.SaleCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.SaleCode, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.EmployeeId, "Employee", htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.DropDownList("EmployeeId", null, "Select an Employee", htmlAttributes: new { @class = "form-control", @required = "required", title = "Employee is requried" })
                                    @Html.ValidationMessageFor(model => model.EmployeeId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.CustomerId, "Customer", htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.DropDownList("CustomerId", null, "Select a Customer", htmlAttributes: new { @class = "form-control", @required = "required", title = "Customer is requried" })
                                    @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.ItemId, "Item Name", htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.DropDownList("ItemId", null, "Select an Item", htmlAttributes: new { @class = "form-control", @required = "required", title = "Item is requried" })
                                    @Html.ValidationMessageFor(model => model.ItemId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Unit" } })
                                    @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Quantity" } })
                                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row col-md-6">
                                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-4 text-right mt-2" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter Price", type = "number", step = "0.01" } })
                                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div><!-- /.modal-body -->
                <div class="modal-footer">
                    <div class="form-actions no-color text-center">
                        <input type="submit" value="Save" class="btn btn-default" id="save" />
                        <button type="button" class="btn btn-light" style=" border: 0.5px solid #a8a9ad;" data-dismiss="modal">Cancel</button>
                    </div>
                </div><!-- /.modal-footer -->
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div>
    <!-- /.modal -->
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function checkTime(i) {
            if (i < 10) {
                i = "0" + i;
            }
            return i;
        }
        function startTime() {
            var today = new Date();
            var d = today.getUTCDate();
            var M = today.getUTCMonth() + 1;
            var y = today.getFullYear();
            var H = today.getHours();
            var m = today.getMinutes();
            M = checkTime(M);
            H = checkTime(H);
            d = checkTime(d);
            m = checkTime(m);
            var saleCode = "GroupOne-" + M + d + y + "-" + H + m;
            $('#SaleCode').val(saleCode);

            var t = setTimeout(function () {
                startTime();
            }, 500);
        }
    </script>
}
